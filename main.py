
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from questions import QUESTIONS, ANSWER_OPTIONS, calculate_result, INVERTED_QUESTIONS  # –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
load_dotenv()
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, TEST_SELECTION, TEST_IN_PROGRESS = range(3)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAIN_MENU_TEXT = (
    "<b>‚ú® –ë–æ—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–∫—Å–∞–Ω—ã ‚ú®</b>\n\n"
       "<i>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</i>\n"
       "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞–¥—ë–∂–Ω—ã–µ —Ä—É–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –û–∫—Å–∞–Ω—ã - –í–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.\n\n"
       "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –º–∏—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è.\n\n"
       "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await show_main_menu(update, context)
    return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    menu_buttons = [["üß™ –¢–µ—Å—Ç—ã", "üèÉ –ú–∞—Ä–∞—Ñ–æ–Ω—ã"], ["üí™ –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]]
    await update.message.reply_text(
        MAIN_MENU_TEXT,
        reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True),
        parse_mode="HTML"
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "üß™ –¢–µ—Å—Ç—ã":
        await show_test_selection(update, context)
        return TEST_SELECTION
    elif text == "üí™ –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã":
        await update.message.reply_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†")
        return MAIN_MENU
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
        return MAIN_MENU

async def show_test_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    test_buttons = [["–®–∫–∞–ª–∞ –ó–∞–Ω–≥–∞ (–¢—Ä–µ–≤–æ–≥–∞)"], ["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(test_buttons, resize_keyboard=True),
        parse_mode="MarkdownV2"
    )

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["test_data"] = {
        "current_question": 0,  # –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        "scores": []
    }
    print("[DEBUG] –¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ:", len(QUESTIONS))
    await update.message.reply_text(
        QUESTIONS[0],  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        reply_markup=ReplyKeyboardMarkup([[btn] for btn in ANSWER_OPTIONS.keys()], resize_keyboard=True)
    )
    return TEST_IN_PROGRESS

async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    test_data = context.user_data["test_data"]
    current_question = test_data["current_question"]
    
    if current_question < len(QUESTIONS):
        await update.message.reply_text(
            QUESTIONS[current_question],
            reply_markup=ReplyKeyboardMarkup(
                [[btn] for btn in ANSWER_OPTIONS.keys()], 
                resize_keyboard=True
            )
        )
        return TEST_IN_PROGRESS
    else:
        return await finish_test(update, context)


        


async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫...")
    
    try:
        total_score = sum(context.user_data["test_data"]["scores"])
        result = calculate_result(total_score)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(
            [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard.to_dict()}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n{result}",
            reply_markup=keyboard
        )
        
    except KeyError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ finish_test: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop("test_data", None)
    return MAIN_MENU

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        user_data = context.user_data.get("test_data")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∞
        if not user_data:
            await update.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return ConversationHandler.END

        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        current_question_idx = user_data["current_question"]
        print(f"[DEBUG] –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {current_question_idx + 1}/{len(QUESTIONS)}")

        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        answer_text = update.message.text
        if answer_text not in ANSWER_OPTIONS:
            raise KeyError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        score = ANSWER_OPTIONS[answer_text]
        
        # 6. –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if (current_question_idx + 1) in INVERTED_QUESTIONS:
            score = 5 - score
            print(f"[DEBUG] –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–ª: {score}")

        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_data["scores"].append(score)
        user_data["current_question"] += 1

        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        if user_data["current_question"] >= len(QUESTIONS):
            print("[DEBUG] –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            return await finish_test(update, context)

        # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question_idx = user_data["current_question"]
        await update.message.reply_text(
            QUESTIONS[next_question_idx],
            reply_markup=ReplyKeyboardMarkup(
                [[btn] for btn in ANSWER_OPTIONS.keys()],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return TEST_IN_PROGRESS

    except KeyError:
        # 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        error_message = (
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(ANSWER_OPTIONS.keys())}"
        )
        await update.message.reply_text(error_message)
        return TEST_IN_PROGRESS

    except Exception as e:
        # 11. –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_answer: {str(e)}")
        await update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

async def handle_main_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return MAIN_MENU
    elif text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç":
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        context.user_data.pop("test_data", None)
        return await start_test(update, context)
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await show_main_menu(update, context)
    return MAIN_MENU

def main() -> None:
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç"
                MessageHandler(
                    filters.Regex(r"^(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç)$"),
                    handle_main_menu_buttons
                ),
                # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            TEST_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_test)],
            TEST_IN_PROGRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    app.add_error_handler(error_handler)
    app.add_handler(conv_handler)
    app.run_polling()


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"[ERROR] –û—à–∏–±–∫–∞: {context.error}")
    if update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()

