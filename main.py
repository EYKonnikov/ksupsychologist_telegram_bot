
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from questions import QUESTIONS, ANSWER_OPTIONS, calculate_result, INVERTED_QUESTIONS  # –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
load_dotenv()
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, TEST_SELECTION, TEST_IN_PROGRESS = range(3)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAIN_MENU_TEXT = (
    "<b>‚ú® –ë–æ—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–∫—Å–∞–Ω—ã ‚ú®</b>\n\n"
       "<i>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</i>\n"
       "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞–¥—ë–∂–Ω—ã–µ —Ä—É–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –û–∫—Å–∞–Ω—ã - –í–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.\n\n"
       "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –º–∏—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è.\n\n"
       "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await show_main_menu(update, context)
    return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    menu_buttons = [["üß™ –¢–µ—Å—Ç—ã", "üèÉ –ú–∞—Ä–∞—Ñ–æ–Ω—ã"], ["üí™ –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]]
    await update.message.reply_text(
        MAIN_MENU_TEXT,
        reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True),
        parse_mode="HTML"
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "üß™ –¢–µ—Å—Ç—ã":
        await show_test_selection(update, context)
        return TEST_SELECTION
    elif text == "üí™ –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã":
        await update.message.reply_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†")
        return MAIN_MENU
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
        return MAIN_MENU

async def show_test_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    test_buttons = [["–®–∫–∞–ª–∞ –ó–∞–Ω–≥–∞ (–¢—Ä–µ–≤–æ–≥–∞)"], ["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(test_buttons, resize_keyboard=True),
        parse_mode="MarkdownV2"
    )

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["test_data"] = {
        "current_question": 0,  # –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        "scores": []
    }
    print("[DEBUG] –¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ:", len(QUESTIONS))
    await update.message.reply_text(
        QUESTIONS[0],  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        reply_markup=ReplyKeyboardMarkup([[btn] for btn in ANSWER_OPTIONS.keys()], resize_keyboard=True)
    )
    return TEST_IN_PROGRESS

async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    test_data = context.user_data["test_data"]
    current_question = test_data["current_question"]
    
    if current_question < len(QUESTIONS):
        await update.message.reply_text(
            QUESTIONS[current_question],
            reply_markup=ReplyKeyboardMarkup(
                [[btn] for btn in ANSWER_OPTIONS.keys()], 
                resize_keyboard=True
            )
        )
        return TEST_IN_PROGRESS
    else:
        return await finish_test(update, context)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get("test_data")
    print(f"[DEBUG] –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {user_data['current_question'] + 1}")
    if not user_data:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return ConversationHandler.END

    current_question_idx = user_data["current_question"]
    
    try:
        answer = update.message.text
        score = ANSWER_OPTIONS[answer]
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if (current_question_idx + 1) in INVERTED_QUESTIONS:  # +1, —Ç–∞–∫ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 1
            score = 5 - score
            
        user_data["scores"].append(score)
        user_data["current_question"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        
    except KeyError:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!")
        return TEST_IN_PROGRESS

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if user_data["current_question"] < len(QUESTIONS):
        await update.message.reply_text(
            QUESTIONS[user_data["current_question"]],  # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            reply_markup=ReplyKeyboardMarkup([[btn] for btn in ANSWER_OPTIONS.keys()], resize_keyboard=True)
        )
        return TEST_IN_PROGRESS
    else:
        total_score = sum(user_data["scores"])
        result = calculate_result(total_score)
        await update.message.reply_text(result, parse_mode="MarkdownV2")
        context.user_data.pop("test_data", None)
        return ConversationHandler.END
        
async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    # ...
    return await send_next_question(update, context)

async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await show_main_menu(update, context)
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
     entry_points=[CommandHandler("start", start)],
     states={
         MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
         TEST_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_test)],
         TEST_IN_PROGRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]  # –í–∞–∂–Ω–æ!
     },
     fallbacks=[CommandHandler("cancel", cancel)],
     allow_reentry=True
 )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()

