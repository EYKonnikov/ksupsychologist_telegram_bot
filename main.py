import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from questions import QUESTIONS, ANSWER_OPTIONS, calculate_result

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START, ANSWERING_QUESTIONS = range(2)
USER_DATA_KEY = "test_data"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    welcome_text = (
   r"üåø *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}\!* –ú–µ–Ω—è –∑–æ–≤—É—Ç *–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–∫—Å–∞–Ω—ã* \- –í–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞\." + "\n\n"
        r"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ *—Ç–µ—Å—Ç –ó–∞–Ω–≥–∞* –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—ë —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\. "
        r"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ç—Ä–µ–≤–æ–≥–∏\." + "\n\n"
        
        r"üìä *–ß—Ç–æ —Ç–∞–∫–æ–µ —à–∫–∞–ª–∞ –ó–∞–Ω–≥–∞?*" + "\n"
        r"_–®–∫–∞–ª–∞ –ó–∞–Ω–≥–∞ –¥–ª—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ \(Zung Self\-Rating Anxiety Scale\)_ \- "
        r"—ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ "
        r"–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤\." + "\n\n"
        
        r"‚ö†Ô∏è *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:*" + "\n"
        r"‚Äî –¢–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç _–∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏_ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" + "\n"
        r"‚Äî –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç —Å–æ–º–Ω–µ–Ω–∏—è, _–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–¥–∏—Ç–µ –∏—Ö —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º_" + "\n"
        r"‚Äî –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ \- _–ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ_ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É" + "\n\n"
        
        r"üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*" + "\n"
        r"1\. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ –∏–∑ 20 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π" + "\n"
        r"2\. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é _–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é_" + "\n"
        r"3\. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞" + "\n\n"
        
        r"üëâ –ù–∞–∂–º–∏—Ç–µ *¬´–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç¬ª*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\."
).format(name=user.first_name)
    await update.message.reply_text(
        welcome_text,
        parse_mode="MarkdownV2",
        reply_markup=ReplyKeyboardMarkup([["–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return START

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    buttons = list(ANSWER_OPTIONS.keys())  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        QUESTIONS[0],
        reply_markup=ReplyKeyboardMarkup(
            [buttons],  # –ö–Ω–æ–ø–∫–∏: ["1 - –ù–∏–∫–æ–≥–¥–∞", "2 - –†–µ–¥–∫–æ", ...]
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    context.user_data[USER_DATA_KEY] = {"current_question": 0, "scores": []}
    return ANSWERING_QUESTIONS

from questions import INVERTED_QUESTIONS  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get(USER_DATA_KEY)
    if not user_data:
        await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å /start")
        return ConversationHandler.END

    text = update.message.text
    if text not in ANSWER_OPTIONS:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!")
        return ANSWERING_QUESTIONS

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–∏–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
    current_question_index = user_data["current_question"]
    # –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
    original_question_number = current_question_index + 1

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    score = ANSWER_OPTIONS[text]
    if original_question_number in INVERTED_QUESTIONS:
        score = 5 - score  # 1 ‚Üí 4, 2 ‚Üí 3, 3 ‚Üí 2, 4 ‚Üí 1

    user_data["scores"].append(score)
    current_question_index += 1

    if current_question_index < len(QUESTIONS):
        user_data["current_question"] = current_question_index
        await update.message.reply_text(
            QUESTIONS[current_question_index],
            reply_markup=ReplyKeyboardMarkup(
                [list(ANSWER_OPTIONS.keys())],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return ANSWERING_QUESTIONS
    else:
        total_score = sum(user_data["scores"])
        result = calculate_result(total_score)
        await update.message.reply_text(
            result,
           parse_mode="MarkdownV2",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.pop(USER_DATA_KEY, None)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    context.user_data.pop(USER_DATA_KEY, None)
    return ConversationHandler.END

def main() -> None:
    app = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_test)],
            ANSWERING_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()